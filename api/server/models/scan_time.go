// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ScanTime scan time of scheduled scan
//
// swagger:model ScanTime
type ScanTime string

func NewScanTime(value ScanTime) *ScanTime {
	v := value
	return &v
}

const (

	// ScanTimeLATER captures enum value "LATER"
	ScanTimeLATER ScanTime = "LATER"

	// ScanTimeREPETITIVE captures enum value "REPETITIVE"
	ScanTimeREPETITIVE ScanTime = "REPETITIVE"
)

// for schema
var scanTimeEnum []interface{}

func init() {
	var res []ScanTime
	if err := json.Unmarshal([]byte(`["LATER","REPETITIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scanTimeEnum = append(scanTimeEnum, v)
	}
}

func (m ScanTime) validateScanTimeEnum(path, location string, value ScanTime) error {
	if err := validate.EnumCase(path, location, value, scanTimeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this scan time
func (m ScanTime) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScanTimeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this scan time based on the context it is used
func (m ScanTime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", ScanTime(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
