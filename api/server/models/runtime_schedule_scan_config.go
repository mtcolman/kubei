// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RuntimeScheduleScanConfig runtime schedule scan config
//
// swagger:model RuntimeScheduleScanConfig
type RuntimeScheduleScanConfig struct {

	// namespaces
	Namespaces []string `json:"namespaces"`

	// scan interval
	ScanInterval *ScanInterval `json:"scanInterval,omitempty"`

	// scan time
	ScanTime ScanTime `json:"scanTime,omitempty"`
}

// Validate validates this runtime schedule scan config
func (m *RuntimeScheduleScanConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScanInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeScheduleScanConfig) validateScanInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanInterval) { // not required
		return nil
	}

	if m.ScanInterval != nil {
		if err := m.ScanInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanInterval")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeScheduleScanConfig) validateScanTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanTime) { // not required
		return nil
	}

	if err := m.ScanTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scanTime")
		}
		return err
	}

	return nil
}

// ContextValidate validate this runtime schedule scan config based on the context it is used
func (m *RuntimeScheduleScanConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScanInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeScheduleScanConfig) contextValidateScanInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanInterval != nil {
		if err := m.ScanInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scanInterval")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeScheduleScanConfig) contextValidateScanTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ScanTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scanTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeScheduleScanConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeScheduleScanConfig) UnmarshalBinary(b []byte) error {
	var res RuntimeScheduleScanConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
