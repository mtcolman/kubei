// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ScanType scan type
//
// swagger:model ScanType
type ScanType string

func NewScanType(value ScanType) *ScanType {
	v := value
	return &v
}

const (

	// ScanTypeQUICK captures enum value "QUICK"
	ScanTypeQUICK ScanType = "QUICK"

	// ScanTypeSCHEDULE captures enum value "SCHEDULE"
	ScanTypeSCHEDULE ScanType = "SCHEDULE"
)

// for schema
var scanTypeEnum []interface{}

func init() {
	var res []ScanType
	if err := json.Unmarshal([]byte(`["QUICK","SCHEDULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scanTypeEnum = append(scanTypeEnum, v)
	}
}

func (m ScanType) validateScanTypeEnum(path, location string, value ScanType) error {
	if err := validate.EnumCase(path, location, value, scanTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this scan type
func (m ScanType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScanTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this scan type based on the context it is used
func (m ScanType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", ScanType(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
