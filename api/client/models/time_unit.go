// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TimeUnit time unit of schedule scan
//
// swagger:model TimeUnit
type TimeUnit string

func NewTimeUnit(value TimeUnit) *TimeUnit {
	v := value
	return &v
}

const (

	// TimeUnitHOURS captures enum value "HOURS"
	TimeUnitHOURS TimeUnit = "HOURS"

	// TimeUnitDAYS captures enum value "DAYS"
	TimeUnitDAYS TimeUnit = "DAYS"

	// TimeUnitWEEKS captures enum value "WEEKS"
	TimeUnitWEEKS TimeUnit = "WEEKS"
)

// for schema
var timeUnitEnum []interface{}

func init() {
	var res []TimeUnit
	if err := json.Unmarshal([]byte(`["HOURS","DAYS","WEEKS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeUnitEnum = append(timeUnitEnum, v)
	}
}

func (m TimeUnit) validateTimeUnitEnum(path, location string, value TimeUnit) error {
	if err := validate.EnumCase(path, location, value, timeUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this time unit
func (m TimeUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTimeUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this time unit based on the context it is used
func (m TimeUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", TimeUnit(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
