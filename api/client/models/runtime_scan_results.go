// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RuntimeScanResults runtime scan results
//
// swagger:model RuntimeScanResults
type RuntimeScanResults struct {

	// cis docker benchmark count per level
	CisDockerBenchmarkCountPerLevel []*CISDockerBenchmarkLevelCount `json:"cisDockerBenchmarkCountPerLevel"`

	// cis docker benchmark counters
	CisDockerBenchmarkCounters *CISDockerBenchmarkScanCounters `json:"cisDockerBenchmarkCounters,omitempty"`

	// Indicates whether CIS docker benchmark scan was enabled
	CisDockerBenchmarkScanEnabled bool `json:"cisDockerBenchmarkScanEnabled,omitempty"`

	// counters
	Counters *RuntimeScanCounters `json:"counters,omitempty"`

	// failures
	Failures []*RuntimeScanFailure `json:"failures"`

	// vulnerability per severity
	VulnerabilityPerSeverity []*VulnerabilityCount `json:"vulnerabilityPerSeverity"`
}

// Validate validates this runtime scan results
func (m *RuntimeScanResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCisDockerBenchmarkCountPerLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCisDockerBenchmarkCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilityPerSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeScanResults) validateCisDockerBenchmarkCountPerLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.CisDockerBenchmarkCountPerLevel) { // not required
		return nil
	}

	for i := 0; i < len(m.CisDockerBenchmarkCountPerLevel); i++ {
		if swag.IsZero(m.CisDockerBenchmarkCountPerLevel[i]) { // not required
			continue
		}

		if m.CisDockerBenchmarkCountPerLevel[i] != nil {
			if err := m.CisDockerBenchmarkCountPerLevel[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cisDockerBenchmarkCountPerLevel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuntimeScanResults) validateCisDockerBenchmarkCounters(formats strfmt.Registry) error {
	if swag.IsZero(m.CisDockerBenchmarkCounters) { // not required
		return nil
	}

	if m.CisDockerBenchmarkCounters != nil {
		if err := m.CisDockerBenchmarkCounters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cisDockerBenchmarkCounters")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeScanResults) validateCounters(formats strfmt.Registry) error {
	if swag.IsZero(m.Counters) { // not required
		return nil
	}

	if m.Counters != nil {
		if err := m.Counters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counters")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeScanResults) validateFailures(formats strfmt.Registry) error {
	if swag.IsZero(m.Failures) { // not required
		return nil
	}

	for i := 0; i < len(m.Failures); i++ {
		if swag.IsZero(m.Failures[i]) { // not required
			continue
		}

		if m.Failures[i] != nil {
			if err := m.Failures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuntimeScanResults) validateVulnerabilityPerSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.VulnerabilityPerSeverity) { // not required
		return nil
	}

	for i := 0; i < len(m.VulnerabilityPerSeverity); i++ {
		if swag.IsZero(m.VulnerabilityPerSeverity[i]) { // not required
			continue
		}

		if m.VulnerabilityPerSeverity[i] != nil {
			if err := m.VulnerabilityPerSeverity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilityPerSeverity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this runtime scan results based on the context it is used
func (m *RuntimeScanResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCisDockerBenchmarkCountPerLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCisDockerBenchmarkCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilityPerSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeScanResults) contextValidateCisDockerBenchmarkCountPerLevel(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CisDockerBenchmarkCountPerLevel); i++ {

		if m.CisDockerBenchmarkCountPerLevel[i] != nil {
			if err := m.CisDockerBenchmarkCountPerLevel[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cisDockerBenchmarkCountPerLevel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuntimeScanResults) contextValidateCisDockerBenchmarkCounters(ctx context.Context, formats strfmt.Registry) error {

	if m.CisDockerBenchmarkCounters != nil {
		if err := m.CisDockerBenchmarkCounters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cisDockerBenchmarkCounters")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeScanResults) contextValidateCounters(ctx context.Context, formats strfmt.Registry) error {

	if m.Counters != nil {
		if err := m.Counters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counters")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeScanResults) contextValidateFailures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Failures); i++ {

		if m.Failures[i] != nil {
			if err := m.Failures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuntimeScanResults) contextValidateVulnerabilityPerSeverity(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VulnerabilityPerSeverity); i++ {

		if m.VulnerabilityPerSeverity[i] != nil {
			if err := m.VulnerabilityPerSeverity[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilityPerSeverity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeScanResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeScanResults) UnmarshalBinary(b []byte) error {
	var res RuntimeScanResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
